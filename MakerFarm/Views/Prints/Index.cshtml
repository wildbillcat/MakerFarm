@model IEnumerable<MakerFarm.Models.Print>
@{
    Dictionary<long, MakerFarm.Models.Print> UnstartedCancelEligiblePrints = (Dictionary<long, MakerFarm.Models.Print>)ViewData["UnstartedCancelEligiblePrints"];
    List<MakerFarm.Models.Printer> Printers = (List<MakerFarm.Models.Printer>)ViewData["Printers"];
    Dictionary<long, MakerFarm.Models.Print> Assigned = (Dictionary<long, MakerFarm.Models.Print>)ViewData["Assigned"];
    Dictionary<long, MakerFarm.Models.PrintEvent> PrintingAssignments = (Dictionary<long, MakerFarm.Models.PrintEvent>)ViewData["PrintingAssignments"];
    Dictionary<long, MakerFarm.Models.PrinterStatusLog> PrinterStatus = (Dictionary<long, MakerFarm.Models.PrinterStatusLog>)ViewData["PrinterStatus"];
    int id = (int)ViewData["id"];
    Dictionary<long, MakerFarm.Models.Material> Materials = (Dictionary<long, MakerFarm.Models.Material>)ViewData["Materials"];
    Dictionary<string, int> ActiveCount = (Dictionary<string, int>)ViewData["ActiveCount"];
    int ActiveQueueLimit = int.Parse(System.Configuration.ConfigurationManager.AppSettings.Get("ActiveQueueLimit"));
}
<h2>@ViewBag.Title</h2>

<p>
    <input type="button" value="Past Prints" onclick="location.href='@Url.Action("PastPrints", new { id = ViewBag.id })'" />
</p>

<h3>Printers:</h3>
<table class="table">
    <tr>
        <th>
            @Html.DisplayName("Printer")
        </th>
        <th>
            Printer Status
        </th>
        @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")))
        {
            <th>HW Status</th>
        }
        <th>
            Status Update
        </th>
        @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")))
        {
            <th>Status Comment</th>
            <th></th>
        }

    </tr>

@foreach (MakerFarm.Models.Printer item in Printers)
        {
    <tr>
        <td><!--Printer Name-->
            @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")))
            {
                @Html.ActionLink(item.PrinterName, "Details", "Printers", new { id = item.PrinterId }, null)
            }
            else
            {
                @item.PrinterName
            }
            </td><!--End Printer Name-->
        <td @if ((Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator"))){
                if ((!PrinterStatus.ContainsKey(item.PrinterId) || PrinterStatus[item.PrinterId].LoggedPrinterStatus == MakerFarm.Models.PrinterStatus.Offline))
                {
                    <text> style="background-color:red" </text>
                }
                else if ((PrinterStatus.ContainsKey(item.PrinterId) && PrinterStatus[item.PrinterId].LoggedPrinterStatus == MakerFarm.Models.PrinterStatus.RequiresMaintenance))
                {
                    <text> style="background-color: orange" </text>
                }                
            }>
            <!--Printer Status/Username + Print File-->
            <!--Test if Printer is Active-->
            @if (PrintingAssignments.ContainsKey(item.PrinterId))
            {
                if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator") || User.Identity.Name.Equals(Assigned[PrintingAssignments[item.PrinterId].PrintId].UserName)))
                {<!--Allow Submitter, Moderator and Administrator to look at print details-->
                @Html.ActionLink(string.Concat("User: ", Assigned[PrintingAssignments[item.PrinterId].PrintId].UserName, " | Printing: ", Assigned[PrintingAssignments[item.PrinterId].PrintId].FileName), "Details", new { id = PrintingAssignments[item.PrinterId].PrintId })
                }
                else
                {<!--Not the Submitter or elevated user, just display User and File Name-->
                <text>User: </text> @Assigned[PrintingAssignments[item.PrinterId].PrintId].UserName <text> | Printing: </text> @Assigned[PrintingAssignments[item.PrinterId].PrintId].FileName
                }
            }
            else
            {
                if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")))
                {<!--Allow Submitter, Moderator and Administrator to look at print details-->
                    if (PrinterStatus.ContainsKey(item.PrinterId))
                    {
                        @Html.ActionLink(PrinterStatus[item.PrinterId].LoggedPrinterStatus.ToString(), "Details", "Printers", new { id = item.PrinterId }, null)
                    }
                    else
                    {
                        @Html.ActionLink("Offline", "Details", "Printers", new { id = item.PrinterId }, null)
                    }
                }
                else
                {<!--Not the Submitter or elevated user, just display User and File Name-->
                    if (PrinterStatus.ContainsKey(item.PrinterId))
                    {<!--If Printer has a status-->
                        if (PrinterStatus[item.PrinterId].LoggedPrinterStatus == MakerFarm.Models.PrinterStatus.RequiresMaintenance)
                        {
                            <text>Online</text>
                        }
                        else
                        {
                            @PrinterStatus[item.PrinterId].LoggedPrinterStatus.ToString()
                        }
                    }
                    else
                    {<!--If Printer Status is unkown, mark it as down-->
                    <text>Offline</text>
                    }
                }
            }
            </td><!--End Printer Status/Username + Print File-->
        @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")))
        {
            <td id="@string.Concat("PrinterHardware", item.PrinterId.ToString())">

            </td>
        }
            <td>
                <!--Status Update-->
                @if (PrinterStatus.ContainsKey(item.PrinterId))
                {
                    @PrinterStatus[item.PrinterId].LogEntryDate.ToString()
                }
                else
                {
                    DateTime.Now.ToString();
                }

            </td><!--End Status Update-->
            @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")))
            {
                if (PrintingAssignments.ContainsKey(item.PrinterId))
                {<!--Printer is Active-->
                <td>@PrintingAssignments[item.PrinterId].Comment</td>
                <td>@Html.ActionLink("Update Status", "Create", "PrintEvents", new { id = PrintingAssignments[item.PrinterId].PrintId }, null)</td>
                }
                else if (PrinterStatus.ContainsKey(item.PrinterId))
                {<!--Printer is Not Active-->
                <td>@PrinterStatus[item.PrinterId].Comment</td>
                <td>@Html.ActionLink("Update Status", "Create", "PrinterStatusLogs", new { id = item.PrinterId }, null)</td>
                }
                else
                {
                    <td></td>
                    <td>@Html.ActionLink("Update Status", "Create", "PrinterStatusLogs", new { id = item.PrinterId }, null)</td>
                }
            }
</tr>
        }
</table>


    <h3>Queue to be Printed in Order:</h3>

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FileName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SubmissionTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MaterialIds)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            if (item.InternalUser) { 
            <tr>
                <td>
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator") || User.Identity.Name.Equals(item.UserName)))
                {
                        @Html.ActionLink(item.FileName, "Details", new { id = item.PrintId })
                }
                else
                {
                        @item.FileName
                }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TermsAndConditionsAgreement)
                </td>
                <td>
                    @foreach (string matid in item.MaterialIds.Split(','))
                    {
                        @Materials[long.Parse(matid)].MaterialName
                    }
                </td>
                <td>
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")) && !(ActiveCount.ContainsKey(item.UserName) && ActiveCount[item.UserName] >= ActiveQueueLimit))
                    {
                        @Html.ActionLink("Print/Cancel", "Create", "PrintEvents", new { id = item.PrintId }, null)
                    }
                    else if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(item.UserName) && UnstartedCancelEligiblePrints.ContainsKey(item.PrintId))
                    {
                        @Html.ActionLink("Cancel", "Cancel", new { id = item.PrintId })
                    }
                </td>
            </tr>
        }
        }

        @foreach (var item in Model)
        {
            if (!item.InternalUser && item.StaffAssistedPrint) //User is external and has made arrangments to pay, and is thus approved by Office
            { 
            <tr>
                <td style="background-color: greenyellow">
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator") || User.Identity.Name.Equals(item.UserName)))
                    {
                        @Html.ActionLink(item.FileName, "Details", new { id = item.PrintId })
                    }
                    else
                    {
                        @item.FileName
                    }
                </td>
                <td style="background-color: greenyellow">
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td style="background-color: greenyellow">
                    @Html.DisplayFor(modelItem => item.TermsAndConditionsAgreement)
                </td>
                <td style="background-color: greenyellow">
                    @foreach (string matid in item.MaterialIds.Split(','))
                    {
                        @Materials[long.Parse(matid)].MaterialName
                    }
                </td>
                <td style="background-color: greenyellow">
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")) && !(ActiveCount.ContainsKey(item.UserName) && ActiveCount[item.UserName] >= ActiveQueueLimit))
                    {
                        @Html.ActionLink("Print/Cancel", "Create", "PrintEvents", new { id = item.PrintId }, null)
                    }
                    else if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(item.UserName) && UnstartedCancelEligiblePrints.ContainsKey(item.PrintId))
                    {
                        @Html.ActionLink("Cancel", "Cancel", new { id = item.PrintId })
                    }
                </td>
            </tr>
        }
        }

        @foreach (var item in Model)
        {
            if (!item.InternalUser && !item.StaffAssistedPrint) //User is external and has not yet made arrangments to pay with the Office
            {
                <tr>
                    <td style="background-color: greenyellow">
                        @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator") || User.Identity.Name.Equals(item.UserName)))
                        {
                            @Html.ActionLink(item.FileName, "Details", new { id = item.PrintId })
                        }
                        else
                        {
                            @item.FileName
                        }
                    </td>
                    <td style="background-color: greenyellow">
                        @Html.DisplayFor(modelItem => item.UserName)
                    </td>
                    <td style="background-color: greenyellow">
                        @Html.DisplayFor(modelItem => item.TermsAndConditionsAgreement)
                    </td>
                    <td style="background-color: greenyellow">
                        @foreach (string matid in item.MaterialIds.Split(','))
                        {
                            @Materials[long.Parse(matid)].MaterialName
                        }
                    </td>
                    <td style="background-color: greenyellow">
                        @if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(item.UserName) && UnstartedCancelEligiblePrints.ContainsKey(item.PrintId))
                        {
                            @Html.ActionLink("Cancel", "Cancel", new { id = item.PrintId })
                        }
                    </td>
                </tr>
            }
        }
    </table>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
    $(document).ready(function () {
        @foreach (MakerFarm.Models.Printer P in Printers)
        {
            @Html.Raw("$('#PrinterHardware") @P.PrinterId @Html.Raw("').load('") @Url.Action("PhysicalPrinterStatus", "Printers", new { id = P.PrinterId, compressed = true }).ToString() @Html.Raw("');")
        }
        setInterval(function () {
            @foreach (MakerFarm.Models.Printer P in Printers)
            {
            @Html.Raw("$('#PrinterHardware") @P.PrinterId @Html.Raw("').load('") @Url.Action("PhysicalPrinterStatus", "Printers", new { id = P.PrinterId, compressed = true }).ToString() @Html.Raw("');")
            }
        }, 5000); //Refreshes every 5 seconds
        $.ajaxSetup({ cache: false });  //Turn off caching

    });
    </script>

}