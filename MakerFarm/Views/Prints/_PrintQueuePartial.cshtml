@{
    Dictionary<long, MakerFarm.Models.Print> UnstartedCancelEligiblePrints = (Dictionary<long, MakerFarm.Models.Print>)ViewData["UnstartedCancelEligiblePrints"];
    Dictionary<long, MakerFarm.Models.Material> Materials = (Dictionary<long, MakerFarm.Models.Material>)ViewData["Materials"];
    Dictionary<string, int> ActiveCount = (Dictionary<string, int>)ViewData["ActiveCount"];
    int ActiveQueueLimit = int.Parse(System.Configuration.ConfigurationManager.AppSettings.Get("ActiveQueueLimit"));
    int queueTotal = 0;
    List<MakerFarm.Models.Print> Waiting = (List<MakerFarm.Models.Print>)ViewData["Waiting"];
}

<h3>Queue to be Printed in Order:</h3>

<table class="table">
    <tr>
        <th>#</th>
        <th>
            File Name
        </th>
        <th>
            User Name
        </th>
        <th>
            Submission Time
        </th>
        <th>
            Material(s)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Waiting)
    {
        if (item.InternalUser)
        {
            <tr>
                <td>
                    @{
                        queueTotal++;
                    }
                    @queueTotal.ToString()
                    
                </td>
                <td>
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator") || User.Identity.Name.Equals(item.UserName)))
                    {
                        @Html.ActionLink(item.FileName, "Details", new { id = item.PrintId })
                    }
                    else
                    {
                        @item.FileName
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TermsAndConditionsAgreement)
                </td>
                <td>
                    @foreach (string matid in item.MaterialIds.Split(','))
                    {
                        @Materials[long.Parse(matid)].MaterialName
                    }
                </td>
                <td>
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")) && !(ActiveCount.ContainsKey(item.UserName) && ActiveCount[item.UserName] >= ActiveQueueLimit))
                    {
                        @Html.ActionLink("Print/Cancel", "Create", "PrintEvents", new { id = item.PrintId }, null)
                    }
                    else if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(item.UserName) && UnstartedCancelEligiblePrints.ContainsKey(item.PrintId))
                    {
                        @Html.ActionLink("Cancel", "Cancel", new { id = item.PrintId })
                    }
                </td>
            </tr>
        }
    }

    @foreach (var item in Waiting)
    {
        if (!item.InternalUser && item.StaffAssistedPrint) //User is external and has made arrangments to pay, and is thus approved by Office
        {
            <tr>
                <td style="background-color: greenyellow">
                    @{
                        queueTotal++;
                    }
                    @queueTotal.ToString()
                </td>
                <td style="background-color: greenyellow">
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator") || User.Identity.Name.Equals(item.UserName)))
                    {
                        @Html.ActionLink(item.FileName, "Details", new { id = item.PrintId })
                    }
                    else
                    {
                        @item.FileName
                    }
                </td>
                <td style="background-color: greenyellow">
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td style="background-color: greenyellow">
                    @Html.DisplayFor(modelItem => item.TermsAndConditionsAgreement)
                </td>
                <td style="background-color: greenyellow">
                    @foreach (string matid in item.MaterialIds.Split(','))
                    {
                        @Materials[long.Parse(matid)].MaterialName
                    }
                </td>
                <td style="background-color: greenyellow">
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator")) && !(ActiveCount.ContainsKey(item.UserName) && ActiveCount[item.UserName] >= ActiveQueueLimit))
                    {
                        @Html.ActionLink("Print/Cancel", "Create", "PrintEvents", new { id = item.PrintId }, null)
                    }
                    else if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(item.UserName) && UnstartedCancelEligiblePrints.ContainsKey(item.PrintId))
                    {
                        @Html.ActionLink("Cancel", "Cancel", new { id = item.PrintId })
                    }
                </td>
            </tr>
        }
    }

    @foreach (var item in Waiting)
    {
        if (!item.InternalUser && !item.StaffAssistedPrint) //User is external and has not yet made arrangments to pay with the Office
        {
            <tr>
                <td style="background-color: greenyellow">
                    @{
                        queueTotal++;
                    }
                    @queueTotal.ToString()                    
                </td>
                <td style="background-color: greenyellow">
                    @if (User.Identity.IsAuthenticated && (Roles.IsUserInRole("Moderator") || Roles.IsUserInRole("Administrator") || User.Identity.Name.Equals(item.UserName)))
                    {
                        @Html.ActionLink(item.FileName, "Details", new { id = item.PrintId })
                    }
                    else
                    {
                        @item.FileName
                    }
                </td>
                <td style="background-color: greenyellow">
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td style="background-color: greenyellow">
                    @Html.DisplayFor(modelItem => item.TermsAndConditionsAgreement)
                </td>
                <td style="background-color: greenyellow">
                    @foreach (string matid in item.MaterialIds.Split(','))
                    {
                        @Materials[long.Parse(matid)].MaterialName
                    }
                </td>
                <td style="background-color: greenyellow">
                    @if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(item.UserName) && UnstartedCancelEligiblePrints.ContainsKey(item.PrintId))
                    {
                        @Html.ActionLink("Cancel", "Cancel", new { id = item.PrintId })
                    }
                </td>
            </tr>
        }
    }
</table>

