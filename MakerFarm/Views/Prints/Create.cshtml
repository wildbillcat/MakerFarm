@model MakerFarm.Models.Print

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm("Create", "Prints", FormMethod.Post, new { enctype = "multipart/form-data" })){
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Print</legend>

        <div class="editor-field">
            @Html.Hidden("UserName", ViewData["CurrentUser"])
        </div>

        <div class="editor-label">
            @Html.Label(string.Concat("Print File: (200 MB Limit, Must be of the following type(s): ", (string)ViewBag.SupportedFileTypes, ")"))
        </div>
        <div class="editor-field">
            @Html.TextBox("PrintFile", null, new { @id="PrintFile", @name="PrintFile", @type="file", @required="required" })
            @Html.ValidationMessage("PrintFile")
        </div>

        @for (int i = 0; i < (int)ViewData["SupportedMaterials"]; i++)
        { 
        <div class="editor-label">
            @Html.Label(string.Concat("Material ", (1+i).ToString()))
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.MaterialIds, (SelectList)ViewData["MaterialsList"])
            @Html.ValidationMessageFor(model => model.MaterialIds)
        </div>
        }

        <div class="editor-label">
            @Html.LabelFor(model => model.EstMaterialUse)
            @Html.Label(string.Concat("(", ViewData["PrinterMeasurmentUnit"], ")"))
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.EstMaterialUse)
            @Html.ValidationMessageFor(model => model.EstMaterialUse)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.EstToolpathTime)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.EstToolpathTime)
            @Html.ValidationMessageFor(model => model.EstToolpathTime)
        </div>
            
        @if ((int)ViewData["MNUA"] > 1)
        {
            <div class="editor-label">
                @Html.LabelFor(model => model.AuthorizedAttempts)
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(model => model.AuthorizedAttempts, (SelectList)ViewData["MaxNumberUserAttempts"])
                @Html.ValidationMessageFor(model => model.AuthorizedAttempts)
            </div>
        }
        else
        {
            <div class="editor-field">
                @Html.Hidden("AuthorizedAttempts", 1)
            </div>
        }
        <div class="editor-label">
            @Html.LabelFor(model => model.Comment)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Comment, new { placeholder = ViewData["PrinterComment"] })
            @Html.ValidationMessageFor(model => model.Comment)
        </div>

        <div class="editor-field">
            @Html.TextBoxFor(model => model.PrinterTypeId, null, new { @type = "hidden", @Value = Url.RequestContext.RouteData.Values["id"] })
            @Html.ValidationMessageFor(model => model.PrinterTypeId)
        </div>
        
        @if ((bool)ViewData["FullColorPrint"])
        {
        <div class="editor-label">
            @Html.LabelFor(model => model.FullColorPrint)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FullColorPrint)
            @Html.ValidationMessageFor(model => model.FullColorPrint)
        </div>
        }
        else
        {
            <div class="editor-field">
                @Html.Hidden("FullColorPrint", false)
            </div>
        }

        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { id = Url.RequestContext.RouteData.Values["id"] })
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
<script>
    
    $('input[type=file]').change(function (e) {
        var file = $(this).val();
        var ext = file.split('.').pop();
        var list = '@ViewBag.SupportedFileTypes';
        var invalid = true;
        var pext = list.split(',');
        var ValidTypeMSG = "Valid File Types are: "
        if (pext.length > 0)
        {
            for (var i = 0; i < pext.length; i++) {
                if (ext == pext[i]) {
                    invalid = false;
                }
                ValidTypeMSG = ValidTypeMSG + pext[i];
            }
        } else {
            if (ext == list) {
                invalid = false;
                ValidTypeMSG = ValidTypeMSG + list;
            }
        }
        
        if (invalid)
        {
            alert("Invaild File Type: " + ext + "\n Valid File Types: " + '@ViewBag.SupportedFileTypes');
        }
        
    });

</script>

        }