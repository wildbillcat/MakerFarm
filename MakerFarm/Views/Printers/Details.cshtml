@model MakerFarm.Models.Printer
@using PagedList;
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    PagedList.IPagedList<MakerFarm.Models.PrinterStatusLog> PrinterHistory = (PagedList.IPagedList<MakerFarm.Models.PrinterStatusLog>)ViewData["PrinterHistory"];
    MakerFarm.Models.Print Print = (MakerFarm.Models.Print)ViewBag.AssignedPrint;
    PagedList.IPagedList<MakerFarm.Models.PrintEvent> PrintHistory = (PagedList.IPagedList<MakerFarm.Models.PrintEvent>)ViewData["PrintHistory"];
}
<head>
    <title>Printer Details</title>
</head>
<h2>Details</h2>

<div>
    <h4>Printer</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.LabelFor(model => model.PrinterName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PrinterName)
        </dd>

        <dt>
            @Html.LabelFor(model => model.InternalName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.InternalName)
        </dd>

        <dt>
            @Html.LabelFor(model => model.PrinterTypeId)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PrinterType.TypeName)
        </dd>

        <dt>
            @Html.LabelFor(model => model.PapercutPrintServer)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PapercutPrintServer)
        </dd>

        <dt>
            @Html.LabelFor(model => model.PapercutPrintQueue)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PapercutPrintQueue)
        </dd>

        <dt>
            @Html.Label("", "Printer Status", new { })
        </dt>

        <dd>
            @ViewData["Status"] 
            @if (!Model.PrinterName.Equals("Null Printer") && Print == null)
            {
               <text> | </text> 
               <input type="button" value="Update" onclick="location.href='@Url.Action("Create", "PrinterStatusLogs", new { id = Model.PrinterId })'" />
            }
        </dd>

        <dt>
            <label>Hardware Status</label>
        </dt>

        <dd id="HardwareStatus">
             
        </dd>

        <dt>
            <label>Hardware Control</label>
        </dt>

        <dd id="HardwareControl">

        </dd>

    </dl>

</div>


        @if (Model.MaterialsInUse.Count() < Model.PrinterType.SupportedNumberMaterials && !Model.PrinterName.Equals("Null Printer"))
        {
            <h3><font color="red">Warning! Machine Needs Material:</font></h3>
            //Add Material Dropdown and Button
            using (Html.BeginForm("Create","MaterialCheckouts")) 
            {
            @Html.AntiForgeryToken()
            <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        @Html.Hidden("PrinterId", Model.PrinterId)
                        @Html.DropDownList("MaterialId", (SelectList)ViewData["Materials"])
                        <input type="submit" value="Add Material" class="btn btn-default" />
                    </div>
                </div>
            }

        }
        
        @if (Model.MaterialsInUse.Count() > 0 && !Model.PrinterName.Equals("Null Printer"))
        {
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayName("Material Type")
                </th>
                <th></th>
            </tr>

            @foreach (MakerFarm.Models.MaterialCheckout M in Model.MaterialsInUse)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => M.Material.MaterialName)
                    </td>
                    <td>
                        @if (Print == null)
                        {
                            using (Html.BeginForm("Delete","MaterialCheckouts"))
                        {
                        @Html.AntiForgeryToken()
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    @Html.Hidden("MaterialCheckoutId", M.MaterialCheckoutId.ToString())
                                    <input type="submit" value="Remove Material" class="btn btn-default" />
                                </div>
                            </div>
                            }
                        }
                        
                    </td>
                </tr>
            }

        </table>
        }
      
@if (Print != null)
{
    <h4>Assigned Print:</h4>

    <table class="table">
        <tr>

            <th>
                File Name
            </th>
            <th>
                User
            </th>
            <th>
                Submission Time
            </th>
            <th>
                Estimated Print Time
            </th>
            <th></th>
        </tr>
        <tr>
            <td>
                @Html.ActionLink(Print.FileName, "Details", "Prints", new { id = Print.PrintId }, null)
            </td>
            <td>
                @Print.UserName
            </td>
            <td>
                @Print.SubmissionTime
            </td>
            <td>
                @Print.EstToolpathTime
            </td>
            <td>
                <input type="button" value="Download" onclick="location.href='@Url.Action("Download", "Prints", new { id = Print.PrintId})'" />
            </td>
        </tr>
    </table>
}
<p>
    <input type="button" value="Back to Queue" onclick="location.href='@Url.Action("Index", "Prints", new { id = Model.PrinterTypeId })'" />
</p>

@if (User.Identity.IsAuthenticated && Roles.IsUserInRole("Administrator"))
{
<h5>Administrative Actions:</h5>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.PrinterId }) |
    @Html.ActionLink("Delete", "Delete", new { id = Model.PrinterId }) 
</p>   
}

<h2>Printer Logs</h2>

<table class="table">
    <tr>
        <th>
            
            @Html.ActionLink("Log Entry Date", "Details", new { id = Model.PrinterId, sortOrder = ViewBag.DateSortParm, page2 = PrintHistory.PageCount, sortOrder2 = ViewBag.CurrentSort2 })
        </th>
        <th>
            @Html.ActionLink("Printer Status", "Details", new { id = Model.PrinterId, sortOrder = ViewBag.NameSortParm, page2 = PrintHistory.PageCount, sortOrder2 = ViewBag.CurrentSort2 })
        </th>
        <th>
            Comment
        </th>
    </tr>

    @foreach (var item in PrinterHistory)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LogEntryDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LoggedPrinterStatus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Comment)
            </td>
        </tr>
    }

</table>

<br />
Page @(PrinterHistory.PageCount < PrinterHistory.PageNumber ? 0 : PrinterHistory.PageNumber) of @PrinterHistory.PageCount

@Html.PagedListPager(PrinterHistory, page => Url.Action("Details", new { id = Model.PrinterId, page = page, sortOrder = ViewBag.CurrentSort, page2 = PrintHistory.PageCount, sortOrder2 = ViewBag.CurrentSort2 }))


<h2>Print Event History</h2>

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Event TimeStamp", "Details", new { id = Model.PrinterId, sortOrder2 = ViewBag.DateSortParm2, page = PrinterHistory.PageCount, sortOrder = ViewBag.CurrentSort })
        </th>
        <th>
            Event Type
        </th>
        <th>
            Printer
        </th>
        <th>
            @Html.ActionLink("User", "Details", new { id = Model.PrinterId, sortOrder2 = ViewBag.NameSortParm2, page = PrinterHistory.PageNumber, sortOrder = ViewBag.CurrentSort })
        </th>
        <th>
            Material
        </th>
        <th>
            Comment
        </th>
    </tr>

    @foreach (var item in PrintHistory)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.EventTimeStamp)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EventType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Printer.PrinterName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UserName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MaterialUsed)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Comment)
            </td>
        </tr>
    }

</table>

<br />
Page @(PrintHistory.PageCount < PrintHistory.PageNumber ? 0 : PrintHistory.PageNumber) of @PrintHistory.PageCount

@Html.PagedListPager(PrinterHistory, page => Url.Action("Details", new { id = Model.PrinterId, page2 = page, sortOrder2 = ViewBag.CurrentSort2, page = PrinterHistory.PageNumber, sortOrder = ViewBag.CurrentSort }))


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        $("#HardwareStatus").load("@Url.Action("PhysicalPrinterStatus", new { id = Model.PrinterId, compressed = false }).ToString()");
        setInterval(function () {
            $("#HardwareStatus").load("@Url.Action("PhysicalPrinterStatus", new { id = Model.PrinterId, compressed = false }).ToString()");
        }, 5000); //Refreshes every 5 seconds
        $.ajaxSetup({ cache: false });  //Turn off caching
    });

    $(document).ready(function () {
        $("#HardwareControl").load("@Url.Action("MachineControlPanel", "Machines", new { id = Model.PrinterId, MachineID = false }).ToString()");
        setInterval(function () {
            $("#HardwareControl").load("@Url.Action("MachineControlPanel", "Machines", new { id = Model.PrinterId, MachineID = false }).ToString()");
        }, 5000); //Refreshes every 5 seconds
        $.ajaxSetup({ cache: false });  //Turn off caching
    });
</script>

}